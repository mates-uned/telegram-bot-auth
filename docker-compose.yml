services:
  db:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    command: postgres -c 'max_connections=100' -c 'shared_buffers=256MB'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - bot-network
  bot:
    build: .
    container_name: telegram_bot
    ports:
      - "8000:8000"
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - EMAIL_PWD=${EMAIL_PWD}
      - FROM_EMAIL_ADDRESS=${FROM_EMAIL_ADDRESS}
      - DB_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    command: ["python3", "app/bot.py"]
    networks:
      - bot-network
    depends_on:
      - db
  pgweb:
    image: sosedoff/pgweb
    container_name: pgweb
    ports:
      - "8081:8081"  # You can change the port if needed
    environment:
      - PGWEB_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      - PG_AUTH=mates_uned:${POSTGRES_PASSWORD}
    networks:
      - bot-network
    depends_on:
      - db
volumes:
  postgres_data:
  pgadmin_data:
networks:
  bot-network:
    driver: bridge